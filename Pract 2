#include <iostream>
#include <vector>
using namespace std;

// Function to solve the 0/1 Knapsack problem
int knapsack(int W, vector<int>& weights, vector<int>& profits, int n) {
    // Create a 2D DP table where dp[i][j] will store the maximum profit 
    // for i items and capacity j.
    vector<vector<int>> dp(n+1, vector<int>(W+1, 0));

    // Build the DP table
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= W; w++) {
            if (weights[i-1] <= w) {
                // We can either include the current item or exclude it.
                dp[i][w] = max(profits[i-1] + dp[i-1][w - weights[i-1]], dp[i-1][w]);
            } else {
                // If the current item's weight exceeds the capacity, we exclude it.
                dp[i][w] = dp[i-1][w];
            }
        }
    }

    // Print the DP table (matrix)
    cout << "\nDP Table (Matrix Form):" << endl;
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            cout << dp[i][w] << "\t"; // Print each cell of the DP matrix
        }
        cout << endl;
    }

    // The last cell of dp table will contain the maximum profit
    return dp[n][W];
}

int main() {
    int n, W;
    
    // Input the number of items and the maximum capacity of the knapsack
    cout << "Enter the number of items: ";
    cin >> n;
    
    cout << "Enter the capacity of knapsack: ";
    cin >> W;

    vector<int> profits(n);
    vector<int> weights(n);

    // Input the profits and weights of the items
    for (int i = 0; i < n; i++) {
        cout << "Enter profit and weight of item " << i+1 << ": ";
        cin >> profits[i] >> weights[i];
    }

    // Call the knapsack function and print the maximum profit
    int maxProfit = knapsack(W, weights, profits, n);
    cout << "\nMaximum Profit: " << maxProfit << endl;

    return 0;
}
