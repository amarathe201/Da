
Problem Statement : A person went to Delhi and he wants to visit all nearby places and reach home before 10 PM. Suggest the best
solution for him and write down the program for the same. So that he can use the same solution in future.

Code :
#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
#include <sstream>

using namespace std;

// A structure to store place details
struct Place {
    string name;
    int visit_time;  // Time to visit the place (in minutes)
    int travel_time; // Travel time to the next place (in minutes)
};

// Function to convert time from minutes to hh:mm format
string convertToTime(int minutes) {
    int hours = minutes / 60;
    int mins = minutes % 60;
    stringstream ss;
    ss << setw(2) << setfill('0') << hours << ":" << setw(2) << setfill('0') << mins;
    return ss.str();
}

int main() {
    int num_places;
    
    // Taking the number of places to visit as input
    cout << "Enter the number of places you want to visit: ";
    cin >> num_places;
    cin.ignore(); // To ignore the newline character after entering the number

    // Vector to store places
    vector<Place> places(num_places);

    // Input for places
    for (int i = 0; i < num_places; ++i) {
        cout << "\nEnter details for place " << (i + 1) << ":\n";
        cout << "Name: ";
        getline(cin, places[i].name);

        cout << "Visit time (in minutes): ";
        cin >> places[i].visit_time;

        if (i != num_places - 1) {
            cout << "Travel time to next place (in minutes): ";
            cin >> places[i].travel_time;
        } else {
            // Last place, no travel time to next place
            places[i].travel_time = 0;
        }

        cin.ignore(); // To ignore the newline character after input
    }

    // Start time is 8:00 AM (480 minutes from midnight)
    int start_time = 8 * 60;
    
    // Time limit to return home before 10:00 PM (22:00)
    int end_time = 22 * 60;
    
    // Variable to keep track of the current time
    int current_time = start_time;

    cout << "\nPlaces to visit and timings:\n";

    for (size_t i = 0; i < places.size(); ++i) {
        // Visit the place
        int visit_start = current_time;
        current_time += places[i].visit_time;
        
        if (current_time > end_time) {
            // If visiting this place exceeds 10 PM, stop the tour
            cout << "You cannot visit " << places[i].name << " as you will return after 10 PM.\n";
            break;
        }

        // Print visit schedule
        cout << "Visit " << places[i].name << " from " << convertToTime(visit_start)
             << " to " << convertToTime(current_time) << endl;

        // Add travel time to the next place (if it's not the last place)
        if (i < places.size() - 1) {
            current_time += places[i].travel_time;
        }

        // If travel time makes the return after 10 PM, stop the tour
        if (current_time > end_time) {
            cout << "You will return after 10 PM, stopping further visits.\n";
            break;
        }
    }

    // Output the expected return time
    cout << "\nExpected return time: " << convertToTime(current_time) << endl;
    
    if (current_time > end_time) {
        cout << "You will return after 10 PM.\n";
    } else {
        cout << "You will return before 10 PM.\n";
    }

    return 0;
}


Output : 

Enter the number of places you want to visit: 3

Enter details for place 1:
Name: India Gate
Visit time (in minutes): 60
Travel time to next place (in minutes): 30

Enter details for place 2:
Name: Qutub Minar
Visit time (in minutes): 90
Travel time to next place (in minutes): 20

Enter details for place 3:
Name: Lotus Temple
Visit time (in minutes): 80

--------------------------------------------------

Places to visit and timings:
Visit India Gate from 08:00 to 09:00
Visit Qutub Minar from 09:30 to 11:00
Visit Lotus Temple from 11:20 to 12:40

Expected return time: 12:40
You will return before 10 PM.
